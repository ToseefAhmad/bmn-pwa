# This is the UPWARD specification file for the Venia storefront.
# It is used by an UPWARD server implementation, such as upward-js and
# upward-php, to describe how the server responds to requests.
# See: https://pwastudio.io/technologies/upward/

# The root properties of an UPWARD spec file are part of a global context
# that includes request and environment data.
# These properties are available to other properties and are ultimately
# populated with Resolvers.

# The root 'status', 'headers', and 'body' properties are required properties
# in an UPWARD spec file.
# An UPWARD server uses the resolved values of these properties to create an
# HTTP response to the client.
# In this file, these properties get their values from a top-level
# 'response' object, which is a recommended and best practice approach.
status: veniaResponse.status
headers: veniaResponse.headers
body: veniaResponse.body

veniaResponse:
  resolver: conditional
  when:
    # Requests to graphql/rest endpoints, the media library, and cache are
    # handled by the top-level 'veniaProxy' object, which is a ProxyResolver
    # that passes the request through to the backing Magento server.
    - matches: request.url.pathname
      pattern: '^/(graphql|rest|media)(/|$)'
      use: veniaProxy
    - matches: request.url.pathname
      pattern: '^/(robots\.txt|favicon\.ico|manifest\.json)'
      use: staticFromRoot
    - matches: fileExtension
      pattern: '(js|json|png|svg|ico|css|txt|woff2|jpg|gif)'
      use: bmnStatic
  default: veniaAppShell

# A FileResolver for serving certain files directly from document root,
# even though they are published to the `static` folder in build assets.
staticFromRoot:
  inline:
    status: 200
    headers:
      resolver: inline
      inline:
        content-type: contentTypeFromExtension
        cache-control:
          when:
            - matches: env.NODE_ENV
              pattern: 'production'
              use:
                inline: public, max-age=604800
          default:
            inline: no-cache, no-store, must-revalidate
    body:
      resolver: file
      parse:
        inline: text
      encoding:
        inline: binary
      file:
        resolver: template
        engine: mustache
        provide:
          filename: request.url.pathname
        template:
          resolver: inline
          inline: './bmn-static/{{ filename }}'

bmnStatic:
  resolver: directory
  directory:
    resolver: inline
    inline: '.'

bmnStaticIncludes:
  resolver: directory
  directory:
    resolver: inline
    inline: './bmn-static'

contentTypeFromExtension:
  when:
    - matches: fileExtension
      pattern: '^ico$'
      use:
        inline: image/x-icon
    - matches: fileExtension
      pattern: '^txt$'
      use:
        inline: text/plain
    - matches: fileExtension
      pattern: '^json$'
      use:
        inline: application/json
  default:
    inline: text/html

# Contains the file extension--the part after the dot--of the URL path.
fileExtension:
  resolver: conditional
  when:
    - matches: request.url.pathname
      pattern: '\.(.*)$'
      use: $match.$1
  default:
    inline: ''

# A ProxyResolver object that passes a request to the backend Magento
# server defined in the MAGENTO_BACKEND_URL environment variable.
# An UPWARD server infers this object as a ProxyResolver due to the presence
# of the 'target' property.
veniaProxy:
  resolver: proxy
  target: env.MAGENTO_BACKEND_URL
  # A local Magento install may have SSH configured and untrusted,
  # which is not a major concern for this one origin, especially if
  # containerized. Clients which require trust may proxy through UPWARD.
  ignoreSSLErrors:
    when:
      - matches: env.NODE_ENV
        pattern: 'production'
        use:
          inline: false
    default:
      inline: true

# Page type data for initial render
veniaPageType:
  resolver: inline
  inline:
    data:
      resolver: conditional
      when:
        - matches: env.SCRIPT_NAME
          pattern: '.*\.php$'
          use:
            resolver: computed
            type:
              resolver: inline
              inline: pageType
            additional:
              - type: product
                fetch: '__typename,id'
              - type: cms_page
                fetch: 'identifier'
              - type: category
                fetch: 'id'
      default:
        inline: ''

# Nonce for page type inline script
veniaPageTypeNonce:
  resolver: inline
  inline:
    nonce:
      resolver: conditional
      when:
        - matches: env.SCRIPT_NAME
          pattern: '.*\.php$'
          use:
            resolver: computed
            type:
              resolver: inline
              inline: pageTypeNonce
      default:
        inline: ''

# Webpack chunks to preload on page based on page type
veniaWebpackChunks:
  resolver: inline
  inline:
    scripts:
      resolver: conditional
      when:
        - matches: env.SCRIPT_NAME
          pattern: '.*\.php$'
          use:
            resolver: computed
            type:
              resolver: inline
              inline: webpackChunks
      default:
        inline: ''

# The veniaAppShell object resolves to a response that returns server-side
# rendered HTML containing the PWA application shell.
# For SEO purposes, the appropriate meta tags in the HTML head element are also
# set based on information about the resource.
# This object uses properties in the top-level 'veniaResponse' object to return
# the appropriate response values.
veniaAppShell:
  resolver: inline
  inline:
    status:
      resolver: inline
      inline: 200
    headers:
      resolver: inline
      inline:
        content-type:
          inline: text/html
        cache-control:
          inline: s-maxage=60
    body:
      resolver: template
      engine: mustache
      provide:
        pageType: veniaPageType.data
        pageTypeNonce: veniaPageTypeNonce.nonce
        webpackChunks: veniaWebpackChunks.scripts
      template:
        resolver: file
        file:
          resolver: inline
          inline: './index.html'
